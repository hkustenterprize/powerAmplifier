ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueFull,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvIsQueueFull:
  25              	.LFB25:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event	list again - but as the
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position in case the queue is only being
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				peeked. */
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Actually removing data, not just peeking. */
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* Record the information required to implement
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							priority inheritance should it become necessary. */
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is not being removed, so reset the read
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pointer. */
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					any other tasks waiting for the data. */
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 34


1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 35


1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  27              		.loc 1 1954 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  38              		.loc 1 1957 0
  39 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 36


  40              	.LVL1:
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  41              		.loc 1 1959 0
  42 0008 A26B     		ldr	r2, [r4, #56]
  43 000a E36B     		ldr	r3, [r4, #60]
  44 000c 9A42     		cmp	r2, r3
  45 000e 04D0     		beq	.L5
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  46              		.loc 1 1965 0
  47 0010 0024     		movs	r4, #0
  48              	.LVL2:
  49              	.L2:
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  50              		.loc 1 1968 0
  51 0012 FFF7FEFF 		bl	vPortExitCritical
  52              	.LVL3:
1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  53              		.loc 1 1971 0
  54 0016 2046     		mov	r0, r4
  55 0018 10BD     		pop	{r4, pc}
  56              	.LVL4:
  57              	.L5:
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  58              		.loc 1 1961 0
  59 001a 0124     		movs	r4, #1
  60              	.LVL5:
  61 001c F9E7     		b	.L2
  62              		.cfi_endproc
  63              	.LFE25:
  65              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  66              		.align	1
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	prvIsQueueEmpty:
  73              	.LFB23:
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
  74              		.loc 1 1915 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              	.LVL6:
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 37


  83              		.cfi_offset 14, -4
  84 0002 0446     		mov	r4, r0
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  85              		.loc 1 1918 0
  86 0004 FFF7FEFF 		bl	vPortEnterCritical
  87              	.LVL7:
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
  88              		.loc 1 1920 0
  89 0008 A36B     		ldr	r3, [r4, #56]
  90 000a 23B1     		cbz	r3, .L10
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
  91              		.loc 1 1926 0
  92 000c 0024     		movs	r4, #0
  93              	.LVL8:
  94              	.L7:
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  95              		.loc 1 1929 0
  96 000e FFF7FEFF 		bl	vPortExitCritical
  97              	.LVL9:
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
  98              		.loc 1 1932 0
  99 0012 2046     		mov	r0, r4
 100 0014 10BD     		pop	{r4, pc}
 101              	.LVL10:
 102              	.L10:
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 103              		.loc 1 1922 0
 104 0016 0124     		movs	r4, #1
 105              	.LVL11:
 106 0018 F9E7     		b	.L7
 107              		.cfi_endproc
 108              	.LFE23:
 110              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	prvCopyDataToQueue:
 118              	.LFB20:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 119              		.loc 1 1698 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              	.LVL12:
 124 0000 70B5     		push	{r4, r5, r6, lr}
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 16
 127              		.cfi_offset 4, -16
 128              		.cfi_offset 5, -12
 129              		.cfi_offset 6, -8
 130              		.cfi_offset 14, -4
 131 0002 0446     		mov	r4, r0
 132 0004 1646     		mov	r6, r2
 133              	.LVL13:
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 38


 134              		.loc 1 1704 0
 135 0006 856B     		ldr	r5, [r0, #56]
 136              	.LVL14:
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 137              		.loc 1 1706 0
 138 0008 026C     		ldr	r2, [r0, #64]
 139              	.LVL15:
 140 000a 5AB9     		cbnz	r2, .L12
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 141              		.loc 1 1710 0
 142 000c 0368     		ldr	r3, [r0]
 143 000e 1BB1     		cbz	r3, .L21
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 144              		.loc 1 1699 0
 145 0010 0020     		movs	r0, #0
 146              	.LVL16:
 147              	.L13:
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 148              		.loc 1 1770 0
 149 0012 0135     		adds	r5, r5, #1
 150              	.LVL17:
 151 0014 A563     		str	r5, [r4, #56]
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 152              		.loc 1 1773 0
 153 0016 70BD     		pop	{r4, r5, r6, pc}
 154              	.LVL18:
 155              	.L21:
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 156              		.loc 1 1713 0
 157 0018 4068     		ldr	r0, [r0, #4]
 158              	.LVL19:
 159 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 160              	.LVL20:
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 161              		.loc 1 1714 0
 162 001e 0023     		movs	r3, #0
 163 0020 6360     		str	r3, [r4, #4]
 164 0022 F6E7     		b	.L13
 165              	.LVL21:
 166              	.L12:
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 167              		.loc 1 1723 0
 168 0024 6EB9     		cbnz	r6, .L14
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 169              		.loc 1 1725 0
 170 0026 8068     		ldr	r0, [r0, #8]
 171              	.LVL22:
 172 0028 FFF7FEFF 		bl	memcpy
 173              	.LVL23:
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 174              		.loc 1 1726 0
 175 002c 226C     		ldr	r2, [r4, #64]
 176 002e A368     		ldr	r3, [r4, #8]
 177 0030 1344     		add	r3, r3, r2
 178 0032 A360     		str	r3, [r4, #8]
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 179              		.loc 1 1727 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 39


 180 0034 6268     		ldr	r2, [r4, #4]
 181 0036 9342     		cmp	r3, r2
 182 0038 19D3     		bcc	.L17
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 183              		.loc 1 1729 0
 184 003a 2368     		ldr	r3, [r4]
 185 003c A360     		str	r3, [r4, #8]
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 186              		.loc 1 1699 0
 187 003e 0020     		movs	r0, #0
 188 0040 E7E7     		b	.L13
 189              	.LVL24:
 190              	.L14:
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 191              		.loc 1 1738 0
 192 0042 C068     		ldr	r0, [r0, #12]
 193              	.LVL25:
 194 0044 FFF7FEFF 		bl	memcpy
 195              	.LVL26:
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 196              		.loc 1 1739 0
 197 0048 226C     		ldr	r2, [r4, #64]
 198 004a 5242     		negs	r2, r2
 199 004c E368     		ldr	r3, [r4, #12]
 200 004e 1344     		add	r3, r3, r2
 201 0050 E360     		str	r3, [r4, #12]
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 202              		.loc 1 1740 0
 203 0052 2168     		ldr	r1, [r4]
 204 0054 8B42     		cmp	r3, r1
 205 0056 02D2     		bcs	.L15
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 206              		.loc 1 1742 0
 207 0058 6368     		ldr	r3, [r4, #4]
 208 005a 1A44     		add	r2, r2, r3
 209 005c E260     		str	r2, [r4, #12]
 210              	.L15:
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 211              		.loc 1 1749 0
 212 005e 022E     		cmp	r6, #2
 213 0060 01D0     		beq	.L22
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 214              		.loc 1 1699 0
 215 0062 0020     		movs	r0, #0
 216 0064 D5E7     		b	.L13
 217              	.L22:
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 218              		.loc 1 1751 0
 219 0066 25B1     		cbz	r5, .L19
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 220              		.loc 1 1757 0
 221 0068 013D     		subs	r5, r5, #1
 222              	.LVL27:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 223              		.loc 1 1699 0
 224 006a 0020     		movs	r0, #0
 225 006c D1E7     		b	.L13
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 40


 226              	.L17:
 227 006e 0020     		movs	r0, #0
 228 0070 CFE7     		b	.L13
 229              	.L19:
 230 0072 0020     		movs	r0, #0
 231 0074 CDE7     		b	.L13
 232              		.cfi_endproc
 233              	.LFE20:
 235              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 236              		.align	1
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv4-sp-d16
 242              	prvCopyDataFromQueue:
 243              	.LFB21:
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 244              		.loc 1 1777 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL28:
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 249              		.loc 1 1778 0
 250 0000 026C     		ldr	r2, [r0, #64]
 251 0002 72B1     		cbz	r2, .L27
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 252              		.loc 1 1777 0
 253 0004 10B5     		push	{r4, lr}
 254              	.LCFI3:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 14, -4
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 258              		.loc 1 1780 0
 259 0006 C368     		ldr	r3, [r0, #12]
 260 0008 1344     		add	r3, r3, r2
 261 000a C360     		str	r3, [r0, #12]
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 262              		.loc 1 1781 0
 263 000c 4468     		ldr	r4, [r0, #4]
 264 000e A342     		cmp	r3, r4
 265 0010 01D3     		bcc	.L25
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 266              		.loc 1 1783 0
 267 0012 0368     		ldr	r3, [r0]
 268 0014 C360     		str	r3, [r0, #12]
 269              	.L25:
 270 0016 0C46     		mov	r4, r1
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 271              		.loc 1 1789 0
 272 0018 C168     		ldr	r1, [r0, #12]
 273              	.LVL29:
 274 001a 2046     		mov	r0, r4
 275              	.LVL30:
 276 001c FFF7FEFF 		bl	memcpy
 277              	.LVL31:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 41


1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 278              		.loc 1 1791 0
 279 0020 10BD     		pop	{r4, pc}
 280              	.LVL32:
 281              	.L27:
 282              	.LCFI4:
 283              		.cfi_def_cfa_offset 0
 284              		.cfi_restore 4
 285              		.cfi_restore 14
 286 0022 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE21:
 290              		.section	.text.prvUnlockQueue,"ax",%progbits
 291              		.align	1
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv4-sp-d16
 297              	prvUnlockQueue:
 298              	.LFB22:
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 299              		.loc 1 1795 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL33:
 304 0000 38B5     		push	{r3, r4, r5, lr}
 305              	.LCFI5:
 306              		.cfi_def_cfa_offset 16
 307              		.cfi_offset 3, -16
 308              		.cfi_offset 4, -12
 309              		.cfi_offset 5, -8
 310              		.cfi_offset 14, -4
 311 0002 0546     		mov	r5, r0
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 312              		.loc 1 1802 0
 313 0004 FFF7FEFF 		bl	vPortEnterCritical
 314              	.LVL34:
 315              	.LBB76:
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 316              		.loc 1 1804 0
 317 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 318 000c 64B2     		sxtb	r4, r4
 319              	.LVL35:
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 320              		.loc 1 1807 0
 321 000e 03E0     		b	.L31
 322              	.L40:
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 323              		.loc 1 1861 0
 324 0010 FFF7FEFF 		bl	vTaskMissedYield
 325              	.LVL36:
 326              	.L33:
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 327              		.loc 1 1875 0
 328 0014 013C     		subs	r4, r4, #1
 329              	.LVL37:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 42


 330 0016 64B2     		sxtb	r4, r4
 331              	.LVL38:
 332              	.L31:
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 333              		.loc 1 1807 0
 334 0018 002C     		cmp	r4, #0
 335 001a 08DD     		ble	.L32
1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 336              		.loc 1 1855 0
 337 001c 6B6A     		ldr	r3, [r5, #36]
 338 001e 33B1     		cbz	r3, .L32
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 339              		.loc 1 1857 0
 340 0020 05F12400 		add	r0, r5, #36
 341 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 342              	.LVL39:
 343 0028 0028     		cmp	r0, #0
 344 002a F3D0     		beq	.L33
 345 002c F0E7     		b	.L40
 346              	.L32:
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 347              		.loc 1 1878 0
 348 002e FF23     		movs	r3, #255
 349 0030 85F84530 		strb	r3, [r5, #69]
 350              	.LBE76:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 351              		.loc 1 1880 0
 352 0034 FFF7FEFF 		bl	vPortExitCritical
 353              	.LVL40:
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 354              		.loc 1 1883 0
 355 0038 FFF7FEFF 		bl	vPortEnterCritical
 356              	.LVL41:
 357              	.LBB77:
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 358              		.loc 1 1885 0
 359 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 360              	.LVL42:
 361 0040 64B2     		sxtb	r4, r4
 362              	.LVL43:
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 363              		.loc 1 1887 0
 364 0042 03E0     		b	.L35
 365              	.L41:
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 366              		.loc 1 1893 0
 367 0044 FFF7FEFF 		bl	vTaskMissedYield
 368              	.LVL44:
 369              	.L37:
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 370              		.loc 1 1900 0
 371 0048 013C     		subs	r4, r4, #1
 372              	.LVL45:
 373 004a 64B2     		sxtb	r4, r4
 374              	.LVL46:
 375              	.L35:
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 43


 376              		.loc 1 1887 0
 377 004c 002C     		cmp	r4, #0
 378 004e 08DD     		ble	.L36
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 379              		.loc 1 1889 0
 380 0050 2B69     		ldr	r3, [r5, #16]
 381 0052 33B1     		cbz	r3, .L36
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 382              		.loc 1 1891 0
 383 0054 05F11000 		add	r0, r5, #16
 384 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 385              	.LVL47:
 386 005c 0028     		cmp	r0, #0
 387 005e F3D0     		beq	.L37
 388 0060 F0E7     		b	.L41
 389              	.L36:
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 390              		.loc 1 1908 0
 391 0062 FF23     		movs	r3, #255
 392 0064 85F84430 		strb	r3, [r5, #68]
 393              	.LBE77:
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 394              		.loc 1 1910 0
 395 0068 FFF7FEFF 		bl	vPortExitCritical
 396              	.LVL48:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 397              		.loc 1 1911 0
 398 006c 38BD     		pop	{r3, r4, r5, pc}
 399              		.cfi_endproc
 400              	.LFE22:
 402              		.section	.text.xQueueGenericReset,"ax",%progbits
 403              		.align	1
 404              		.global	xQueueGenericReset
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 408              		.fpu fpv4-sp-d16
 410              	xQueueGenericReset:
 411              	.LFB5:
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 412              		.loc 1 280 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 416              	.LVL49:
 417 0000 38B5     		push	{r3, r4, r5, lr}
 418              	.LCFI6:
 419              		.cfi_def_cfa_offset 16
 420              		.cfi_offset 3, -16
 421              		.cfi_offset 4, -12
 422              		.cfi_offset 5, -8
 423              		.cfi_offset 14, -4
 424              	.LVL50:
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 425              		.loc 1 283 0
 426 0002 40B9     		cbnz	r0, .L43
 427              	.LBB78:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 44


 428              	.LBB79:
 429              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 45


  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 46


 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 47


 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 48


 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 430              		.loc 2 237 0
 431              		.syntax unified
 432              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 433 0004 4FF05003 			mov r3, #80												
 434 0008 83F31188 		msr basepri, r3											
 435 000c BFF36F8F 		isb														
 436 0010 BFF34F8F 		dsb														
 437              	
 438              	@ 0 "" 2
 439              	.LVL51:
 440              		.thumb
 441              		.syntax unified
 442              	.L44:
 443 0014 FEE7     		b	.L44
 444              	.L43:
 445 0016 0446     		mov	r4, r0
 446 0018 0D46     		mov	r5, r1
 447              	.LBE79:
 448              	.LBE78:
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 449              		.loc 1 285 0
 450 001a FFF7FEFF 		bl	vPortEnterCritical
 451              	.LVL52:
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 452              		.loc 1 287 0
 453 001e 2168     		ldr	r1, [r4]
 454 0020 E26B     		ldr	r2, [r4, #60]
 455 0022 236C     		ldr	r3, [r4, #64]
 456 0024 03FB0210 		mla	r0, r3, r2, r1
 457 0028 6060     		str	r0, [r4, #4]
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 458              		.loc 1 288 0
 459 002a 0020     		movs	r0, #0
 460 002c A063     		str	r0, [r4, #56]
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 461              		.loc 1 289 0
 462 002e A160     		str	r1, [r4, #8]
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 463              		.loc 1 290 0
 464 0030 013A     		subs	r2, r2, #1
 465 0032 02FB0313 		mla	r3, r2, r3, r1
 466 0036 E360     		str	r3, [r4, #12]
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 467              		.loc 1 291 0
 468 0038 FF23     		movs	r3, #255
 469 003a 84F84430 		strb	r3, [r4, #68]
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 49


 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 470              		.loc 1 292 0
 471 003e 84F84530 		strb	r3, [r4, #69]
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 472              		.loc 1 294 0
 473 0042 A5B9     		cbnz	r5, .L45
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 474              		.loc 1 301 0
 475 0044 2369     		ldr	r3, [r4, #16]
 476 0046 1BB9     		cbnz	r3, .L48
 477              	.L46:
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 478              		.loc 1 324 0
 479 0048 FFF7FEFF 		bl	vPortExitCritical
 480              	.LVL53:
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 481              		.loc 1 329 0
 482 004c 0120     		movs	r0, #1
 483 004e 38BD     		pop	{r3, r4, r5, pc}
 484              	.LVL54:
 485              	.L48:
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 486              		.loc 1 303 0
 487 0050 04F11000 		add	r0, r4, #16
 488 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 489              	.LVL55:
 490 0058 0028     		cmp	r0, #0
 491 005a F5D0     		beq	.L46
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 492              		.loc 1 305 0
 493 005c 084B     		ldr	r3, .L49
 494 005e 4FF08052 		mov	r2, #268435456
 495 0062 1A60     		str	r2, [r3]
 496              		.syntax unified
 497              	@ 305 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 498 0064 BFF34F8F 		dsb
 499              	@ 0 "" 2
 500              	@ 305 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 501 0068 BFF36F8F 		isb
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505 006c ECE7     		b	.L46
 506              	.L45:
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 507              		.loc 1 320 0
 508 006e 04F11000 		add	r0, r4, #16
 509 0072 FFF7FEFF 		bl	vListInitialise
 510              	.LVL56:
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 511              		.loc 1 321 0
 512 0076 04F12400 		add	r0, r4, #36
 513 007a FFF7FEFF 		bl	vListInitialise
 514              	.LVL57:
 515 007e E3E7     		b	.L46
 516              	.L50:
 517              		.align	2
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 50


 518              	.L49:
 519 0080 04ED00E0 		.word	-536810236
 520              		.cfi_endproc
 521              	.LFE5:
 523              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 524              		.align	1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv4-sp-d16
 530              	prvInitialiseNewQueue:
 531              	.LFB7:
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 532              		.loc 1 433 0
 533              		.cfi_startproc
 534              		@ args = 4, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              	.LVL58:
 537 0000 10B5     		push	{r4, lr}
 538              	.LCFI7:
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 4, -8
 541              		.cfi_offset 14, -4
 542 0002 029B     		ldr	r3, [sp, #8]
 543              	.LVL59:
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 544              		.loc 1 438 0
 545 0004 0C46     		mov	r4, r1
 546 0006 39B1     		cbz	r1, .L55
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 547              		.loc 1 449 0
 548 0008 1A60     		str	r2, [r3]
 549              	.L53:
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 550              		.loc 1 454 0
 551 000a D863     		str	r0, [r3, #60]
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 552              		.loc 1 455 0
 553 000c 1C64     		str	r4, [r3, #64]
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 554              		.loc 1 456 0
 555 000e 0121     		movs	r1, #1
 556              	.LVL60:
 557 0010 1846     		mov	r0, r3
 558              	.LVL61:
 559 0012 FFF7FEFF 		bl	xQueueGenericReset
 560              	.LVL62:
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 561              		.loc 1 471 0
 562 0016 10BD     		pop	{r4, pc}
 563              	.LVL63:
 564              	.L55:
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 565              		.loc 1 444 0
 566 0018 1B60     		str	r3, [r3]
 567 001a F6E7     		b	.L53
 568              		.cfi_endproc
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 51


 569              	.LFE7:
 571              		.section	.text.xQueueGenericCreate,"ax",%progbits
 572              		.align	1
 573              		.global	xQueueGenericCreate
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu fpv4-sp-d16
 579              	xQueueGenericCreate:
 580              	.LFB6:
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 581              		.loc 1 387 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL64:
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 586              		.loc 1 392 0
 587 0000 40B9     		cbnz	r0, .L57
 588              	.LBB80:
 589              	.LBB81:
 590              		.loc 2 237 0
 591              		.syntax unified
 592              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 593 0002 4FF05003 			mov r3, #80												
 594 0006 83F31188 		msr basepri, r3											
 595 000a BFF36F8F 		isb														
 596 000e BFF34F8F 		dsb														
 597              	
 598              	@ 0 "" 2
 599              	.LVL65:
 600              		.thumb
 601              		.syntax unified
 602              	.L58:
 603 0012 FEE7     		b	.L58
 604              	.L57:
 605              	.LBE81:
 606              	.LBE80:
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 607              		.loc 1 387 0
 608 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 609              	.LCFI8:
 610              		.cfi_def_cfa_offset 20
 611              		.cfi_offset 4, -20
 612              		.cfi_offset 5, -16
 613              		.cfi_offset 6, -12
 614              		.cfi_offset 7, -8
 615              		.cfi_offset 14, -4
 616 0016 83B0     		sub	sp, sp, #12
 617              	.LCFI9:
 618              		.cfi_def_cfa_offset 32
 619 0018 0546     		mov	r5, r0
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 620              		.loc 1 394 0
 621 001a 11B1     		cbz	r1, .L61
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 622              		.loc 1 403 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 52


 623 001c 01FB00F0 		mul	r0, r1, r0
 624              	.LVL66:
 625 0020 00E0     		b	.L59
 626              	.LVL67:
 627              	.L61:
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 628              		.loc 1 397 0
 629 0022 0020     		movs	r0, #0
 630              	.LVL68:
 631              	.L59:
 632 0024 1746     		mov	r7, r2
 633 0026 0C46     		mov	r4, r1
 634              	.LVL69:
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 635              		.loc 1 406 0
 636 0028 4830     		adds	r0, r0, #72
 637              	.LVL70:
 638 002a FFF7FEFF 		bl	pvPortMalloc
 639              	.LVL71:
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 640              		.loc 1 408 0
 641 002e 0646     		mov	r6, r0
 642 0030 38B1     		cbz	r0, .L56
 643              	.LVL72:
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 644              		.loc 1 423 0
 645 0032 0090     		str	r0, [sp]
 646 0034 3B46     		mov	r3, r7
 647 0036 00F14802 		add	r2, r0, #72
 648              	.LVL73:
 649 003a 2146     		mov	r1, r4
 650 003c 2846     		mov	r0, r5
 651              	.LVL74:
 652 003e FFF7FEFF 		bl	prvInitialiseNewQueue
 653              	.LVL75:
 654              	.L56:
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 655              		.loc 1 427 0
 656 0042 3046     		mov	r0, r6
 657 0044 03B0     		add	sp, sp, #12
 658              	.LCFI10:
 659              		.cfi_def_cfa_offset 20
 660              		@ sp needed
 661 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 662              		.cfi_endproc
 663              	.LFE6:
 665              		.section	.text.xQueueGenericSend,"ax",%progbits
 666              		.align	1
 667              		.global	xQueueGenericSend
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	xQueueGenericSend:
 674              	.LFB10:
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 675              		.loc 1 724 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 53


 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 16
 678              		@ frame_needed = 0, uses_anonymous_args = 0
 679              	.LVL76:
 680 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 681              	.LCFI11:
 682              		.cfi_def_cfa_offset 20
 683              		.cfi_offset 4, -20
 684              		.cfi_offset 5, -16
 685              		.cfi_offset 6, -12
 686              		.cfi_offset 7, -8
 687              		.cfi_offset 14, -4
 688 0002 85B0     		sub	sp, sp, #20
 689              	.LCFI12:
 690              		.cfi_def_cfa_offset 40
 691 0004 0192     		str	r2, [sp, #4]
 692              	.LVL77:
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 693              		.loc 1 729 0
 694 0006 60B1     		cbz	r0, .L89
 695 0008 0446     		mov	r4, r0
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 696              		.loc 1 730 0
 697 000a 99B9     		cbnz	r1, .L67
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 698              		.loc 1 730 0 is_stmt 0 discriminator 2
 699 000c 026C     		ldr	r2, [r0, #64]
 700              	.LVL78:
 701 000e 8AB1     		cbz	r2, .L67
 702              	.LBB82:
 703              	.LBB83:
 704              		.loc 2 237 0 is_stmt 1
 705              		.syntax unified
 706              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 707 0010 4FF05003 			mov r3, #80												
 708 0014 83F31188 		msr basepri, r3											
 709 0018 BFF36F8F 		isb														
 710 001c BFF34F8F 		dsb														
 711              	
 712              	@ 0 "" 2
 713              	.LVL79:
 714              		.thumb
 715              		.syntax unified
 716              	.L68:
 717 0020 FEE7     		b	.L68
 718              	.LVL80:
 719              	.L89:
 720              	.LBE83:
 721              	.LBE82:
 722              	.LBB84:
 723              	.LBB85:
 724              		.syntax unified
 725              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 726 0022 4FF05003 			mov r3, #80												
 727 0026 83F31188 		msr basepri, r3											
 728 002a BFF36F8F 		isb														
 729 002e BFF34F8F 		dsb														
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 54


 730              	
 731              	@ 0 "" 2
 732              	.LVL81:
 733              		.thumb
 734              		.syntax unified
 735              	.L66:
 736 0032 FEE7     		b	.L66
 737              	.LVL82:
 738              	.L67:
 739              	.LBE85:
 740              	.LBE84:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 741              		.loc 1 731 0
 742 0034 022B     		cmp	r3, #2
 743 0036 0BD1     		bne	.L69
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 744              		.loc 1 731 0 is_stmt 0 discriminator 2
 745 0038 E26B     		ldr	r2, [r4, #60]
 746 003a 012A     		cmp	r2, #1
 747 003c 08D0     		beq	.L69
 748              	.LBB86:
 749              	.LBB87:
 750              		.loc 2 237 0 is_stmt 1
 751              		.syntax unified
 752              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 753 003e 4FF05003 			mov r3, #80												
 754 0042 83F31188 		msr basepri, r3											
 755 0046 BFF36F8F 		isb														
 756 004a BFF34F8F 		dsb														
 757              	
 758              	@ 0 "" 2
 759              	.LVL83:
 760              		.thumb
 761              		.syntax unified
 762              	.L70:
 763 004e FEE7     		b	.L70
 764              	.LVL84:
 765              	.L69:
 766 0050 1E46     		mov	r6, r3
 767 0052 0F46     		mov	r7, r1
 768              	.LBE87:
 769              	.LBE86:
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 770              		.loc 1 734 0
 771 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 772              	.LVL85:
 773 0058 50B9     		cbnz	r0, .L86
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 774              		.loc 1 734 0 is_stmt 0 discriminator 2
 775 005a 019B     		ldr	r3, [sp, #4]
 776 005c 53B1     		cbz	r3, .L87
 777              	.LBB88:
 778              	.LBB89:
 779              		.loc 2 237 0 is_stmt 1
 780              		.syntax unified
 781              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 782 005e 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 55


 783 0062 83F31188 		msr basepri, r3											
 784 0066 BFF36F8F 		isb														
 785 006a BFF34F8F 		dsb														
 786              	
 787              	@ 0 "" 2
 788              	.LVL86:
 789              		.thumb
 790              		.syntax unified
 791              	.L72:
 792 006e FEE7     		b	.L72
 793              	.L86:
 794              	.LBE89:
 795              	.LBE88:
 796 0070 0025     		movs	r5, #0
 797 0072 3AE0     		b	.L73
 798              	.L87:
 799 0074 0025     		movs	r5, #0
 800 0076 38E0     		b	.L73
 801              	.LVL87:
 802              	.L74:
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 803              		.loc 1 753 0
 804 0078 3246     		mov	r2, r6
 805 007a 3946     		mov	r1, r7
 806 007c 2046     		mov	r0, r4
 807 007e FFF7FEFF 		bl	prvCopyDataToQueue
 808              	.LVL88:
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 809              		.loc 1 808 0
 810 0082 636A     		ldr	r3, [r4, #36]
 811 0084 4BB9     		cbnz	r3, .L90
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 812              		.loc 1 823 0
 813 0086 A8B1     		cbz	r0, .L77
 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 814              		.loc 1 829 0
 815 0088 3B4B     		ldr	r3, .L95
 816 008a 4FF08052 		mov	r2, #268435456
 817 008e 1A60     		str	r2, [r3]
 818              		.syntax unified
 819              	@ 829 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 820 0090 BFF34F8F 		dsb
 821              	@ 0 "" 2
 822              	@ 829 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 823 0094 BFF36F8F 		isb
 824              	@ 0 "" 2
 825              		.thumb
 826              		.syntax unified
 827 0098 0CE0     		b	.L77
 828              	.L90:
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 829              		.loc 1 810 0
 830 009a 04F12400 		add	r0, r4, #36
 831              	.LVL89:
 832 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 833              	.LVL90:
 834 00a2 38B1     		cbz	r0, .L77
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 56


 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 835              		.loc 1 816 0
 836 00a4 344B     		ldr	r3, .L95
 837 00a6 4FF08052 		mov	r2, #268435456
 838 00aa 1A60     		str	r2, [r3]
 839              		.syntax unified
 840              	@ 816 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 841 00ac BFF34F8F 		dsb
 842              	@ 0 "" 2
 843              	@ 816 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 844 00b0 BFF36F8F 		isb
 845              	@ 0 "" 2
 846              		.thumb
 847              		.syntax unified
 848              	.L77:
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 849              		.loc 1 838 0
 850 00b4 FFF7FEFF 		bl	vPortExitCritical
 851              	.LVL91:
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 852              		.loc 1 839 0
 853 00b8 0120     		movs	r0, #1
 854              	.L64:
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 855              		.loc 1 918 0
 856 00ba 05B0     		add	sp, sp, #20
 857              	.LCFI13:
 858              		.cfi_remember_state
 859              		.cfi_def_cfa_offset 20
 860              		@ sp needed
 861 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 862              	.LVL92:
 863              	.L91:
 864              	.LCFI14:
 865              		.cfi_restore_state
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 866              		.loc 1 847 0
 867 00be FFF7FEFF 		bl	vPortExitCritical
 868              	.LVL93:
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 869              		.loc 1 852 0
 870 00c2 0020     		movs	r0, #0
 871 00c4 F9E7     		b	.L64
 872              	.L92:
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 873              		.loc 1 858 0
 874 00c6 02A8     		add	r0, sp, #8
 875 00c8 FFF7FEFF 		bl	vTaskSetTimeOutState
 876              	.LVL94:
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 877              		.loc 1 859 0
 878 00cc 0125     		movs	r5, #1
 879 00ce 19E0     		b	.L80
 880              	.LVL95:
 881              	.L93:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 882              		.loc 1 874 0 discriminator 1
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 57


 883 00d0 0023     		movs	r3, #0
 884 00d2 84F84430 		strb	r3, [r4, #68]
 885 00d6 21E0     		b	.L81
 886              	.L94:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 887              		.loc 1 874 0 is_stmt 0 discriminator 4
 888 00d8 0023     		movs	r3, #0
 889 00da 84F84530 		strb	r3, [r4, #69]
 890 00de 23E0     		b	.L82
 891              	.L84:
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 892              		.loc 1 904 0 is_stmt 1
 893 00e0 2046     		mov	r0, r4
 894 00e2 FFF7FEFF 		bl	prvUnlockQueue
 895              	.LVL96:
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 896              		.loc 1 905 0
 897 00e6 FFF7FEFF 		bl	xTaskResumeAll
 898              	.LVL97:
 899              	.L73:
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 900              		.loc 1 744 0
 901 00ea FFF7FEFF 		bl	vPortEnterCritical
 902              	.LVL98:
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 903              		.loc 1 750 0
 904 00ee A26B     		ldr	r2, [r4, #56]
 905 00f0 E36B     		ldr	r3, [r4, #60]
 906 00f2 9A42     		cmp	r2, r3
 907 00f4 C0D3     		bcc	.L74
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 908              		.loc 1 750 0 is_stmt 0 discriminator 1
 909 00f6 022E     		cmp	r6, #2
 910 00f8 BED0     		beq	.L74
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 911              		.loc 1 843 0 is_stmt 1
 912 00fa 019B     		ldr	r3, [sp, #4]
 913 00fc 002B     		cmp	r3, #0
 914 00fe DED0     		beq	.L91
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 915              		.loc 1 854 0
 916 0100 002D     		cmp	r5, #0
 917 0102 E0D0     		beq	.L92
 918              	.LVL99:
 919              	.L80:
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 920              		.loc 1 868 0
 921 0104 FFF7FEFF 		bl	vPortExitCritical
 922              	.LVL100:
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 923              		.loc 1 873 0
 924 0108 FFF7FEFF 		bl	vTaskSuspendAll
 925              	.LVL101:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 926              		.loc 1 874 0
 927 010c FFF7FEFF 		bl	vPortEnterCritical
 928              	.LVL102:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 58


 929 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 930 0114 5BB2     		sxtb	r3, r3
 931 0116 B3F1FF3F 		cmp	r3, #-1
 932 011a D9D0     		beq	.L93
 933              	.L81:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 934              		.loc 1 874 0 is_stmt 0 discriminator 3
 935 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 936 0120 5BB2     		sxtb	r3, r3
 937 0122 B3F1FF3F 		cmp	r3, #-1
 938 0126 D7D0     		beq	.L94
 939              	.L82:
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 940              		.loc 1 874 0 discriminator 6
 941 0128 FFF7FEFF 		bl	vPortExitCritical
 942              	.LVL103:
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 943              		.loc 1 877 0 is_stmt 1 discriminator 6
 944 012c 01A9     		add	r1, sp, #4
 945 012e 02A8     		add	r0, sp, #8
 946 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 947              	.LVL104:
 948 0134 C8B9     		cbnz	r0, .L83
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 949              		.loc 1 879 0
 950 0136 2046     		mov	r0, r4
 951 0138 FFF7FEFF 		bl	prvIsQueueFull
 952              	.LVL105:
 953 013c 0028     		cmp	r0, #0
 954 013e CFD0     		beq	.L84
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 955              		.loc 1 882 0
 956 0140 0199     		ldr	r1, [sp, #4]
 957 0142 04F11000 		add	r0, r4, #16
 958 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 959              	.LVL106:
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960              		.loc 1 889 0
 961 014a 2046     		mov	r0, r4
 962 014c FFF7FEFF 		bl	prvUnlockQueue
 963              	.LVL107:
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 964              		.loc 1 896 0
 965 0150 FFF7FEFF 		bl	xTaskResumeAll
 966              	.LVL108:
 967 0154 0028     		cmp	r0, #0
 968 0156 C8D1     		bne	.L73
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 969              		.loc 1 898 0
 970 0158 074B     		ldr	r3, .L95
 971 015a 4FF08052 		mov	r2, #268435456
 972 015e 1A60     		str	r2, [r3]
 973              		.syntax unified
 974              	@ 898 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 975 0160 BFF34F8F 		dsb
 976              	@ 0 "" 2
 977              	@ 898 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 59


 978 0164 BFF36F8F 		isb
 979              	@ 0 "" 2
 980              		.thumb
 981              		.syntax unified
 982 0168 BFE7     		b	.L73
 983              	.L83:
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 984              		.loc 1 911 0
 985 016a 2046     		mov	r0, r4
 986 016c FFF7FEFF 		bl	prvUnlockQueue
 987              	.LVL109:
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 988              		.loc 1 912 0
 989 0170 FFF7FEFF 		bl	xTaskResumeAll
 990              	.LVL110:
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 991              		.loc 1 915 0
 992 0174 0020     		movs	r0, #0
 993 0176 A0E7     		b	.L64
 994              	.L96:
 995              		.align	2
 996              	.L95:
 997 0178 04ED00E0 		.word	-536810236
 998              		.cfi_endproc
 999              	.LFE10:
 1001              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1002              		.align	1
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	prvInitialiseMutex:
 1009              	.LFB8:
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1010              		.loc 1 477 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              	.LVL111:
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1015              		.loc 1 478 0
 1016 0000 48B1     		cbz	r0, .L100
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1017              		.loc 1 477 0
 1018 0002 08B5     		push	{r3, lr}
 1019              	.LCFI15:
 1020              		.cfi_def_cfa_offset 8
 1021              		.cfi_offset 3, -8
 1022              		.cfi_offset 14, -4
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1023              		.loc 1 484 0
 1024 0004 0021     		movs	r1, #0
 1025 0006 4160     		str	r1, [r0, #4]
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1026              		.loc 1 485 0
 1027 0008 0160     		str	r1, [r0]
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 60


 1028              		.loc 1 488 0
 1029 000a C160     		str	r1, [r0, #12]
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1030              		.loc 1 493 0
 1031 000c 0B46     		mov	r3, r1
 1032 000e 0A46     		mov	r2, r1
 1033 0010 FFF7FEFF 		bl	xQueueGenericSend
 1034              	.LVL112:
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1035              		.loc 1 499 0
 1036 0014 08BD     		pop	{r3, pc}
 1037              	.LVL113:
 1038              	.L100:
 1039              	.LCFI16:
 1040              		.cfi_def_cfa_offset 0
 1041              		.cfi_restore 3
 1042              		.cfi_restore 14
 1043 0016 7047     		bx	lr
 1044              		.cfi_endproc
 1045              	.LFE8:
 1047              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1048              		.align	1
 1049              		.global	xQueueCreateMutex
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	xQueueCreateMutex:
 1056              	.LFB9:
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1057              		.loc 1 507 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              	.LVL114:
 1062 0000 10B5     		push	{r4, lr}
 1063              	.LCFI17:
 1064              		.cfi_def_cfa_offset 8
 1065              		.cfi_offset 4, -8
 1066              		.cfi_offset 14, -4
 1067              	.LVL115:
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1068              		.loc 1 511 0
 1069 0002 0246     		mov	r2, r0
 1070 0004 0021     		movs	r1, #0
 1071 0006 0120     		movs	r0, #1
 1072              	.LVL116:
 1073 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1074              	.LVL117:
 1075 000c 0446     		mov	r4, r0
 1076              	.LVL118:
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1077              		.loc 1 512 0
 1078 000e FFF7FEFF 		bl	prvInitialiseMutex
 1079              	.LVL119:
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1080              		.loc 1 515 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 61


 1081 0012 2046     		mov	r0, r4
 1082 0014 10BD     		pop	{r4, pc}
 1083              		.cfi_endproc
 1084              	.LFE9:
 1086              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1087              		.align	1
 1088              		.global	xQueueGenericSendFromISR
 1089              		.syntax unified
 1090              		.thumb
 1091              		.thumb_func
 1092              		.fpu fpv4-sp-d16
 1094              	xQueueGenericSendFromISR:
 1095              	.LFB11:
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1096              		.loc 1 922 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 0
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 1100              	.LVL120:
 1101 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1102              	.LCFI18:
 1103              		.cfi_def_cfa_offset 32
 1104              		.cfi_offset 3, -32
 1105              		.cfi_offset 4, -28
 1106              		.cfi_offset 5, -24
 1107              		.cfi_offset 6, -20
 1108              		.cfi_offset 7, -16
 1109              		.cfi_offset 8, -12
 1110              		.cfi_offset 9, -8
 1111              		.cfi_offset 14, -4
 1112              	.LVL121:
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1113              		.loc 1 927 0
 1114 0004 60B1     		cbz	r0, .L120
 1115 0006 0446     		mov	r4, r0
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1116              		.loc 1 928 0
 1117 0008 99B9     		cbnz	r1, .L108
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1118              		.loc 1 928 0 is_stmt 0 discriminator 2
 1119 000a 006C     		ldr	r0, [r0, #64]
 1120              	.LVL122:
 1121 000c 88B1     		cbz	r0, .L108
 1122              	.LBB90:
 1123              	.LBB91:
 1124              		.loc 2 237 0 is_stmt 1
 1125              		.syntax unified
 1126              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1127 000e 4FF05003 			mov r3, #80												
 1128 0012 83F31188 		msr basepri, r3											
 1129 0016 BFF36F8F 		isb														
 1130 001a BFF34F8F 		dsb														
 1131              	
 1132              	@ 0 "" 2
 1133              	.LVL123:
 1134              		.thumb
 1135              		.syntax unified
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 62


 1136              	.L109:
 1137 001e FEE7     		b	.L109
 1138              	.LVL124:
 1139              	.L120:
 1140              	.LBE91:
 1141              	.LBE90:
 1142              	.LBB92:
 1143              	.LBB93:
 1144              		.syntax unified
 1145              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1146 0020 4FF05003 			mov r3, #80												
 1147 0024 83F31188 		msr basepri, r3											
 1148 0028 BFF36F8F 		isb														
 1149 002c BFF34F8F 		dsb														
 1150              	
 1151              	@ 0 "" 2
 1152              	.LVL125:
 1153              		.thumb
 1154              		.syntax unified
 1155              	.L107:
 1156 0030 FEE7     		b	.L107
 1157              	.LVL126:
 1158              	.L108:
 1159              	.LBE93:
 1160              	.LBE92:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1161              		.loc 1 929 0
 1162 0032 022B     		cmp	r3, #2
 1163 0034 0BD1     		bne	.L110
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1164              		.loc 1 929 0 is_stmt 0 discriminator 2
 1165 0036 E06B     		ldr	r0, [r4, #60]
 1166 0038 0128     		cmp	r0, #1
 1167 003a 08D0     		beq	.L110
 1168              	.LBB94:
 1169              	.LBB95:
 1170              		.loc 2 237 0 is_stmt 1
 1171              		.syntax unified
 1172              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1173 003c 4FF05003 			mov r3, #80												
 1174 0040 83F31188 		msr basepri, r3											
 1175 0044 BFF36F8F 		isb														
 1176 0048 BFF34F8F 		dsb														
 1177              	
 1178              	@ 0 "" 2
 1179              	.LVL127:
 1180              		.thumb
 1181              		.syntax unified
 1182              	.L111:
 1183 004c FEE7     		b	.L111
 1184              	.LVL128:
 1185              	.L110:
 1186 004e 1F46     		mov	r7, r3
 1187 0050 9046     		mov	r8, r2
 1188 0052 8946     		mov	r9, r1
 1189              	.LBE95:
 1190              	.LBE94:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 63


 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1191              		.loc 1 945 0
 1192 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1193              	.LVL129:
 1194              	.LBB96:
 1195              	.LBB97:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1196              		.loc 2 253 0
 1197              		.syntax unified
 1198              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1199 0058 EFF31186 			mrs r6, basepri											
 1200 005c 4FF05003 		mov r3, #80												
 1201 0060 83F31188 		msr basepri, r3											
 1202 0064 BFF36F8F 		isb														
 1203 0068 BFF34F8F 		dsb														
 1204              	
 1205              	@ 0 "" 2
 1206              		.thumb
 1207              		.syntax unified
 1208              	.LBE97:
 1209              	.LBE96:
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1210              		.loc 1 954 0
 1211 006c A26B     		ldr	r2, [r4, #56]
 1212 006e E36B     		ldr	r3, [r4, #60]
 1213 0070 9A42     		cmp	r2, r3
 1214 0072 03D3     		bcc	.L112
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1215              		.loc 1 954 0 is_stmt 0 discriminator 1
 1216 0074 022F     		cmp	r7, #2
 1217 0076 01D0     		beq	.L112
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1218              		.loc 1 1063 0 is_stmt 1
 1219 0078 0020     		movs	r0, #0
 1220 007a 0FE0     		b	.L113
 1221              	.L112:
 1222              	.LBB98:
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1223              		.loc 1 956 0
 1224 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1225 0080 6DB2     		sxtb	r5, r5
 1226              	.LVL130:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 64


 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1227              		.loc 1 965 0
 1228 0082 3A46     		mov	r2, r7
 1229 0084 4946     		mov	r1, r9
 1230 0086 2046     		mov	r0, r4
 1231 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1232              	.LVL131:
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1233              		.loc 1 969 0
 1234 008c B5F1FF3F 		cmp	r5, #-1
 1235 0090 08D0     		beq	.L121
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1236              		.loc 1 1055 0
 1237 0092 6B1C     		adds	r3, r5, #1
 1238 0094 5BB2     		sxtb	r3, r3
 1239 0096 84F84530 		strb	r3, [r4, #69]
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1240              		.loc 1 1058 0
 1241 009a 0120     		movs	r0, #1
 1242              	.LVL132:
 1243              	.L113:
 1244              	.LBE98:
 1245              	.LBB99:
 1246              	.LBB100:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1247              		.loc 2 271 0
 1248              		.syntax unified
 1249              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1250 009c 86F31188 			msr basepri, r6	
 1251              	@ 0 "" 2
 1252              	.LVL133:
 1253              		.thumb
 1254              		.syntax unified
 1255              	.LBE100:
 1256              	.LBE99:
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1257              		.loc 1 1069 0
 1258 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1259              	.LVL134:
 1260              	.L121:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 65


 1261              	.LBB101:
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1262              		.loc 1 1024 0
 1263 00a4 636A     		ldr	r3, [r4, #36]
 1264 00a6 5BB1     		cbz	r3, .L116
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1265              		.loc 1 1026 0
 1266 00a8 04F12400 		add	r0, r4, #36
 1267 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1268              	.LVL135:
 1269 00b0 40B1     		cbz	r0, .L117
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1270              		.loc 1 1030 0
 1271 00b2 B8F1000F 		cmp	r8, #0
 1272 00b6 07D0     		beq	.L118
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1273              		.loc 1 1032 0
 1274 00b8 0120     		movs	r0, #1
 1275 00ba C8F80000 		str	r0, [r8]
 1276 00be EDE7     		b	.L113
 1277              	.L116:
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1278              		.loc 1 1058 0
 1279 00c0 0120     		movs	r0, #1
 1280 00c2 EBE7     		b	.L113
 1281              	.L117:
 1282 00c4 0120     		movs	r0, #1
 1283 00c6 E9E7     		b	.L113
 1284              	.L118:
 1285 00c8 0120     		movs	r0, #1
 1286 00ca E7E7     		b	.L113
 1287              	.LBE101:
 1288              		.cfi_endproc
 1289              	.LFE11:
 1291              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1292              		.align	1
 1293              		.global	xQueueGiveFromISR
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	xQueueGiveFromISR:
 1300              	.LFB12:
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1301              		.loc 1 1073 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              	.LVL136:
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1306              		.loc 1 1084 0
 1307 0000 60B1     		cbz	r0, .L137
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1308              		.loc 1 1073 0
 1309 0002 70B5     		push	{r4, r5, r6, lr}
 1310              	.LCFI19:
 1311              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 66


 1312              		.cfi_offset 4, -16
 1313              		.cfi_offset 5, -12
 1314              		.cfi_offset 6, -8
 1315              		.cfi_offset 14, -4
 1316 0004 0446     		mov	r4, r0
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1317              		.loc 1 1088 0
 1318 0006 036C     		ldr	r3, [r0, #64]
 1319 0008 8BB1     		cbz	r3, .L125
 1320              	.LBB102:
 1321              	.LBB103:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1322              		.loc 2 237 0
 1323              		.syntax unified
 1324              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1325 000a 4FF05003 			mov r3, #80												
 1326 000e 83F31188 		msr basepri, r3											
 1327 0012 BFF36F8F 		isb														
 1328 0016 BFF34F8F 		dsb														
 1329              	
 1330              	@ 0 "" 2
 1331              	.LVL137:
 1332              		.thumb
 1333              		.syntax unified
 1334              	.L126:
 1335 001a FEE7     		b	.L126
 1336              	.L137:
 1337              	.LCFI20:
 1338              		.cfi_def_cfa_offset 0
 1339              		.cfi_restore 4
 1340              		.cfi_restore 5
 1341              		.cfi_restore 6
 1342              		.cfi_restore 14
 1343              	.LBE103:
 1344              	.LBE102:
 1345              	.LBB104:
 1346              	.LBB105:
 1347              		.syntax unified
 1348              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1349 001c 4FF05003 			mov r3, #80												
 1350 0020 83F31188 		msr basepri, r3											
 1351 0024 BFF36F8F 		isb														
 1352 0028 BFF34F8F 		dsb														
 1353              	
 1354              	@ 0 "" 2
 1355              	.LVL138:
 1356              		.thumb
 1357              		.syntax unified
 1358              	.L124:
 1359 002c FEE7     		b	.L124
 1360              	.L125:
 1361              	.LCFI21:
 1362              		.cfi_def_cfa_offset 16
 1363              		.cfi_offset 4, -16
 1364              		.cfi_offset 5, -12
 1365              		.cfi_offset 6, -8
 1366              		.cfi_offset 14, -4
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 67


 1367              	.LBE105:
 1368              	.LBE104:
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1369              		.loc 1 1093 0
 1370 002e 0368     		ldr	r3, [r0]
 1371 0030 2BB3     		cbz	r3, .L138
 1372              	.L127:
 1373 0032 0E46     		mov	r6, r1
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1374              		.loc 1 1109 0
 1375 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1376              	.LVL139:
 1377              	.LBB106:
 1378              	.LBB107:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1379              		.loc 2 253 0
 1380              		.syntax unified
 1381              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1382 0038 EFF31185 			mrs r5, basepri											
 1383 003c 4FF05003 		mov r3, #80												
 1384 0040 83F31188 		msr basepri, r3											
 1385 0044 BFF36F8F 		isb														
 1386 0048 BFF34F8F 		dsb														
 1387              	
 1388              	@ 0 "" 2
 1389              		.thumb
 1390              		.syntax unified
 1391              	.LBE107:
 1392              	.LBE106:
 1393              	.LBB108:
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1394              		.loc 1 1113 0
 1395 004c A26B     		ldr	r2, [r4, #56]
 1396              	.LVL140:
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1397              		.loc 1 1118 0
 1398 004e E36B     		ldr	r3, [r4, #60]
 1399 0050 9342     		cmp	r3, r2
 1400 0052 26D9     		bls	.L131
 1401              	.LBB109:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1402              		.loc 1 1120 0
 1403 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1404 0058 5BB2     		sxtb	r3, r3
 1405              	.LVL141:
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1406              		.loc 1 1130 0
 1407 005a 0132     		adds	r2, r2, #1
 1408              	.LVL142:
 1409 005c A263     		str	r2, [r4, #56]
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1410              		.loc 1 1134 0
 1411 005e B3F1FF3F 		cmp	r3, #-1
 1412 0062 18D1     		bne	.L130
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1413              		.loc 1 1189 0
 1414 0064 636A     		ldr	r3, [r4, #36]
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 68


 1415              	.LVL143:
 1416 0066 F3B1     		cbz	r3, .L132
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1417              		.loc 1 1191 0
 1418 0068 04F12400 		add	r0, r4, #36
 1419 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1420              	.LVL144:
 1421 0070 D8B1     		cbz	r0, .L133
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1422              		.loc 1 1195 0
 1423 0072 E6B1     		cbz	r6, .L134
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1424              		.loc 1 1197 0
 1425 0074 0120     		movs	r0, #1
 1426 0076 3060     		str	r0, [r6]
 1427              	.L129:
 1428              	.LVL145:
 1429              	.LBE109:
 1430              	.LBE108:
 1431              	.LBB112:
 1432              	.LBB113:
 1433              		.loc 2 271 0
 1434              		.syntax unified
 1435              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1436 0078 85F31188 			msr basepri, r5	
 1437              	@ 0 "" 2
 1438              	.LVL146:
 1439              		.thumb
 1440              		.syntax unified
 1441              	.LBE113:
 1442              	.LBE112:
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1443              		.loc 1 1234 0
 1444 007c 70BD     		pop	{r4, r5, r6, pc}
 1445              	.LVL147:
 1446              	.L138:
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1447              		.loc 1 1093 0 discriminator 2
 1448 007e 4368     		ldr	r3, [r0, #4]
 1449 0080 002B     		cmp	r3, #0
 1450 0082 D6D0     		beq	.L127
 1451              	.LBB114:
 1452              	.LBB115:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1453              		.loc 2 237 0
 1454              		.syntax unified
 1455              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1456 0084 4FF05003 			mov r3, #80												
 1457 0088 83F31188 		msr basepri, r3											
 1458 008c BFF36F8F 		isb														
 1459 0090 BFF34F8F 		dsb														
 1460              	
 1461              	@ 0 "" 2
 1462              	.LVL148:
 1463              		.thumb
 1464              		.syntax unified
 1465              	.L128:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 69


 1466 0094 FEE7     		b	.L128
 1467              	.LVL149:
 1468              	.L130:
 1469              	.LBE115:
 1470              	.LBE114:
 1471              	.LBB116:
 1472              	.LBB110:
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1473              		.loc 1 1220 0
 1474 0096 0133     		adds	r3, r3, #1
 1475              	.LVL150:
 1476 0098 5BB2     		sxtb	r3, r3
 1477              	.LVL151:
 1478 009a 84F84530 		strb	r3, [r4, #69]
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1479              		.loc 1 1223 0
 1480 009e 0120     		movs	r0, #1
 1481 00a0 EAE7     		b	.L129
 1482              	.LVL152:
 1483              	.L131:
 1484              	.LBE110:
1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1485              		.loc 1 1228 0
 1486 00a2 0020     		movs	r0, #0
 1487 00a4 E8E7     		b	.L129
 1488              	.LVL153:
 1489              	.L132:
 1490              	.LBB111:
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1491              		.loc 1 1223 0
 1492 00a6 0120     		movs	r0, #1
 1493 00a8 E6E7     		b	.L129
 1494              	.LVL154:
 1495              	.L133:
 1496 00aa 0120     		movs	r0, #1
 1497 00ac E4E7     		b	.L129
 1498              	.L134:
 1499 00ae 0120     		movs	r0, #1
 1500 00b0 E2E7     		b	.L129
 1501              	.LBE111:
 1502              	.LBE116:
 1503              		.cfi_endproc
 1504              	.LFE12:
 1506              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1507              		.align	1
 1508              		.global	xQueueGenericReceive
 1509              		.syntax unified
 1510              		.thumb
 1511              		.thumb_func
 1512              		.fpu fpv4-sp-d16
 1514              	xQueueGenericReceive:
 1515              	.LFB13:
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1516              		.loc 1 1238 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 16
 1519              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 70


 1520              	.LVL155:
 1521 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1522              	.LCFI22:
 1523              		.cfi_def_cfa_offset 24
 1524              		.cfi_offset 4, -24
 1525              		.cfi_offset 5, -20
 1526              		.cfi_offset 6, -16
 1527              		.cfi_offset 7, -12
 1528              		.cfi_offset 8, -8
 1529              		.cfi_offset 14, -4
 1530 0004 84B0     		sub	sp, sp, #16
 1531              	.LCFI23:
 1532              		.cfi_def_cfa_offset 40
 1533 0006 0192     		str	r2, [sp, #4]
 1534              	.LVL156:
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1535              		.loc 1 1244 0
 1536 0008 60B1     		cbz	r0, .L163
 1537 000a 0446     		mov	r4, r0
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1538              		.loc 1 1245 0
 1539 000c 99B9     		cbnz	r1, .L142
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1540              		.loc 1 1245 0 is_stmt 0 discriminator 2
 1541 000e 026C     		ldr	r2, [r0, #64]
 1542              	.LVL157:
 1543 0010 8AB1     		cbz	r2, .L142
 1544              	.LBB117:
 1545              	.LBB118:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1546              		.loc 2 237 0 is_stmt 1
 1547              		.syntax unified
 1548              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1549 0012 4FF05003 			mov r3, #80												
 1550 0016 83F31188 		msr basepri, r3											
 1551 001a BFF36F8F 		isb														
 1552 001e BFF34F8F 		dsb														
 1553              	
 1554              	@ 0 "" 2
 1555              	.LVL158:
 1556              		.thumb
 1557              		.syntax unified
 1558              	.L143:
 1559 0022 FEE7     		b	.L143
 1560              	.LVL159:
 1561              	.L163:
 1562              	.LBE118:
 1563              	.LBE117:
 1564              	.LBB119:
 1565              	.LBB120:
 1566              		.syntax unified
 1567              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1568 0024 4FF05003 			mov r3, #80												
 1569 0028 83F31188 		msr basepri, r3											
 1570 002c BFF36F8F 		isb														
 1571 0030 BFF34F8F 		dsb														
 1572              	
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 71


 1573              	@ 0 "" 2
 1574              	.LVL160:
 1575              		.thumb
 1576              		.syntax unified
 1577              	.L141:
 1578 0034 FEE7     		b	.L141
 1579              	.LVL161:
 1580              	.L142:
 1581 0036 1F46     		mov	r7, r3
 1582 0038 8846     		mov	r8, r1
 1583              	.LBE120:
 1584              	.LBE119:
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1585              		.loc 1 1248 0
 1586 003a FFF7FEFF 		bl	xTaskGetSchedulerState
 1587              	.LVL162:
 1588 003e 50B9     		cbnz	r0, .L160
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1589              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1590 0040 019B     		ldr	r3, [sp, #4]
 1591 0042 53B1     		cbz	r3, .L161
 1592              	.LBB121:
 1593              	.LBB122:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1594              		.loc 2 237 0 is_stmt 1
 1595              		.syntax unified
 1596              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1597 0044 4FF05003 			mov r3, #80												
 1598 0048 83F31188 		msr basepri, r3											
 1599 004c BFF36F8F 		isb														
 1600 0050 BFF34F8F 		dsb														
 1601              	
 1602              	@ 0 "" 2
 1603              	.LVL163:
 1604              		.thumb
 1605              		.syntax unified
 1606              	.L145:
 1607 0054 FEE7     		b	.L145
 1608              	.L160:
 1609              	.LBE122:
 1610              	.LBE121:
 1611 0056 0026     		movs	r6, #0
 1612 0058 5FE0     		b	.L146
 1613              	.L161:
 1614 005a 0026     		movs	r6, #0
 1615 005c 5DE0     		b	.L146
 1616              	.LVL164:
 1617              	.L165:
 1618              	.LBB123:
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1619              		.loc 1 1268 0
 1620 005e E668     		ldr	r6, [r4, #12]
 1621              	.LVL165:
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1622              		.loc 1 1270 0
 1623 0060 4146     		mov	r1, r8
 1624 0062 2046     		mov	r0, r4
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 72


 1625 0064 FFF7FEFF 		bl	prvCopyDataFromQueue
 1626              	.LVL166:
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1627              		.loc 1 1272 0
 1628 0068 DFB9     		cbnz	r7, .L148
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1629              		.loc 1 1277 0
 1630 006a 013D     		subs	r5, r5, #1
 1631              	.LVL167:
 1632 006c A563     		str	r5, [r4, #56]
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1633              		.loc 1 1281 0
 1634 006e 2368     		ldr	r3, [r4]
 1635 0070 13B9     		cbnz	r3, .L149
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1636              		.loc 1 1285 0
 1637 0072 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1638              	.LVL168:
 1639 0076 6060     		str	r0, [r4, #4]
 1640              	.L149:
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1641              		.loc 1 1294 0
 1642 0078 2369     		ldr	r3, [r4, #16]
 1643 007a 63B1     		cbz	r3, .L150
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1644              		.loc 1 1296 0
 1645 007c 04F11000 		add	r0, r4, #16
 1646 0080 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1647              	.LVL169:
 1648 0084 38B1     		cbz	r0, .L150
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1649              		.loc 1 1298 0
 1650 0086 464B     		ldr	r3, .L171
 1651 0088 4FF08052 		mov	r2, #268435456
 1652 008c 1A60     		str	r2, [r3]
 1653              		.syntax unified
 1654              	@ 1298 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1655 008e BFF34F8F 		dsb
 1656              	@ 0 "" 2
 1657              	@ 1298 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1658 0092 BFF36F8F 		isb
 1659              	@ 0 "" 2
 1660              	.LVL170:
 1661              		.thumb
 1662              		.syntax unified
 1663              	.L150:
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1664              		.loc 1 1338 0
 1665 0096 FFF7FEFF 		bl	vPortExitCritical
 1666              	.LVL171:
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1667              		.loc 1 1339 0
 1668 009a 0120     		movs	r0, #1
 1669              	.LVL172:
 1670              	.L139:
 1671              	.LBE123:
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 73


 1672              		.loc 1 1431 0
 1673 009c 04B0     		add	sp, sp, #16
 1674              	.LCFI24:
 1675              		.cfi_remember_state
 1676              		.cfi_def_cfa_offset 24
 1677              		@ sp needed
 1678 009e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1679              	.LVL173:
 1680              	.L148:
 1681              	.LCFI25:
 1682              		.cfi_restore_state
 1683              	.LBB124:
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1684              		.loc 1 1316 0
 1685 00a2 E660     		str	r6, [r4, #12]
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1686              		.loc 1 1320 0
 1687 00a4 636A     		ldr	r3, [r4, #36]
 1688 00a6 002B     		cmp	r3, #0
 1689 00a8 F5D0     		beq	.L150
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1690              		.loc 1 1322 0
 1691 00aa 04F12400 		add	r0, r4, #36
 1692 00ae FFF7FEFF 		bl	xTaskRemoveFromEventList
 1693              	.LVL174:
 1694 00b2 0028     		cmp	r0, #0
 1695 00b4 EFD0     		beq	.L150
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1696              		.loc 1 1325 0
 1697 00b6 3A4B     		ldr	r3, .L171
 1698 00b8 4FF08052 		mov	r2, #268435456
 1699 00bc 1A60     		str	r2, [r3]
 1700              		.syntax unified
 1701              	@ 1325 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1702 00be BFF34F8F 		dsb
 1703              	@ 0 "" 2
 1704              	@ 1325 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1705 00c2 BFF36F8F 		isb
 1706              	@ 0 "" 2
 1707              		.thumb
 1708              		.syntax unified
 1709 00c6 E6E7     		b	.L150
 1710              	.LVL175:
 1711              	.L166:
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1712              		.loc 1 1347 0
 1713 00c8 FFF7FEFF 		bl	vPortExitCritical
 1714              	.LVL176:
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1715              		.loc 1 1349 0
 1716 00cc 0020     		movs	r0, #0
 1717 00ce E5E7     		b	.L139
 1718              	.L167:
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1719              		.loc 1 1355 0
 1720 00d0 02A8     		add	r0, sp, #8
 1721 00d2 FFF7FEFF 		bl	vTaskSetTimeOutState
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 74


 1722              	.LVL177:
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1723              		.loc 1 1356 0
 1724 00d6 0126     		movs	r6, #1
 1725 00d8 29E0     		b	.L153
 1726              	.LVL178:
 1727              	.L168:
 1728              	.LBE124:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1729              		.loc 1 1371 0 discriminator 1
 1730 00da 0023     		movs	r3, #0
 1731 00dc 84F84430 		strb	r3, [r4, #68]
 1732 00e0 31E0     		b	.L154
 1733              	.L169:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1734              		.loc 1 1371 0 is_stmt 0 discriminator 4
 1735 00e2 0023     		movs	r3, #0
 1736 00e4 84F84530 		strb	r3, [r4, #69]
 1737 00e8 33E0     		b	.L155
 1738              	.L170:
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1739              		.loc 1 1384 0 is_stmt 1
 1740 00ea FFF7FEFF 		bl	vPortEnterCritical
 1741              	.LVL179:
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1742              		.loc 1 1386 0
 1743 00ee 6068     		ldr	r0, [r4, #4]
 1744 00f0 FFF7FEFF 		bl	vTaskPriorityInherit
 1745              	.LVL180:
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1746              		.loc 1 1388 0
 1747 00f4 FFF7FEFF 		bl	vPortExitCritical
 1748              	.LVL181:
 1749 00f8 3BE0     		b	.L158
 1750              	.L157:
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1751              		.loc 1 1411 0
 1752 00fa 2046     		mov	r0, r4
 1753 00fc FFF7FEFF 		bl	prvUnlockQueue
 1754              	.LVL182:
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1755              		.loc 1 1412 0
 1756 0100 FFF7FEFF 		bl	xTaskResumeAll
 1757              	.LVL183:
 1758 0104 09E0     		b	.L146
 1759              	.L156:
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1760              		.loc 1 1417 0
 1761 0106 2046     		mov	r0, r4
 1762 0108 FFF7FEFF 		bl	prvUnlockQueue
 1763              	.LVL184:
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1764              		.loc 1 1418 0
 1765 010c FFF7FEFF 		bl	xTaskResumeAll
 1766              	.LVL185:
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1767              		.loc 1 1420 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 75


 1768 0110 2046     		mov	r0, r4
 1769 0112 FFF7FEFF 		bl	prvIsQueueEmpty
 1770              	.LVL186:
 1771 0116 0028     		cmp	r0, #0
 1772 0118 40D1     		bne	.L164
 1773              	.LVL187:
 1774              	.L146:
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1775              		.loc 1 1258 0
 1776 011a FFF7FEFF 		bl	vPortEnterCritical
 1777              	.LVL188:
 1778              	.LBB125:
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1779              		.loc 1 1260 0
 1780 011e A56B     		ldr	r5, [r4, #56]
 1781              	.LVL189:
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1782              		.loc 1 1264 0
 1783 0120 002D     		cmp	r5, #0
 1784 0122 9CD1     		bne	.L165
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1785              		.loc 1 1343 0
 1786 0124 019B     		ldr	r3, [sp, #4]
 1787 0126 002B     		cmp	r3, #0
 1788 0128 CED0     		beq	.L166
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1789              		.loc 1 1351 0
 1790 012a 002E     		cmp	r6, #0
 1791 012c D0D0     		beq	.L167
 1792              	.LVL190:
 1793              	.L153:
 1794              	.LBE125:
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1795              		.loc 1 1365 0
 1796 012e FFF7FEFF 		bl	vPortExitCritical
 1797              	.LVL191:
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1798              		.loc 1 1370 0
 1799 0132 FFF7FEFF 		bl	vTaskSuspendAll
 1800              	.LVL192:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1801              		.loc 1 1371 0
 1802 0136 FFF7FEFF 		bl	vPortEnterCritical
 1803              	.LVL193:
 1804 013a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1805 013e 5BB2     		sxtb	r3, r3
 1806 0140 B3F1FF3F 		cmp	r3, #-1
 1807 0144 C9D0     		beq	.L168
 1808              	.L154:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1809              		.loc 1 1371 0 is_stmt 0 discriminator 3
 1810 0146 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1811 014a 5BB2     		sxtb	r3, r3
 1812 014c B3F1FF3F 		cmp	r3, #-1
 1813 0150 C7D0     		beq	.L169
 1814              	.L155:
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 76


 1815              		.loc 1 1371 0 discriminator 6
 1816 0152 FFF7FEFF 		bl	vPortExitCritical
 1817              	.LVL194:
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1818              		.loc 1 1374 0 is_stmt 1 discriminator 6
 1819 0156 01A9     		add	r1, sp, #4
 1820 0158 02A8     		add	r0, sp, #8
 1821 015a FFF7FEFF 		bl	xTaskCheckForTimeOut
 1822              	.LVL195:
 1823 015e 0028     		cmp	r0, #0
 1824 0160 D1D1     		bne	.L156
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1825              		.loc 1 1376 0
 1826 0162 2046     		mov	r0, r4
 1827 0164 FFF7FEFF 		bl	prvIsQueueEmpty
 1828              	.LVL196:
 1829 0168 0028     		cmp	r0, #0
 1830 016a C6D0     		beq	.L157
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1831              		.loc 1 1382 0
 1832 016c 2368     		ldr	r3, [r4]
 1833 016e 002B     		cmp	r3, #0
 1834 0170 BBD0     		beq	.L170
 1835              	.L158:
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1836              		.loc 1 1397 0
 1837 0172 0199     		ldr	r1, [sp, #4]
 1838 0174 04F12400 		add	r0, r4, #36
 1839 0178 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1840              	.LVL197:
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1841              		.loc 1 1398 0
 1842 017c 2046     		mov	r0, r4
 1843 017e FFF7FEFF 		bl	prvUnlockQueue
 1844              	.LVL198:
1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1845              		.loc 1 1399 0
 1846 0182 FFF7FEFF 		bl	xTaskResumeAll
 1847              	.LVL199:
 1848 0186 0028     		cmp	r0, #0
 1849 0188 C7D1     		bne	.L146
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1850              		.loc 1 1401 0
 1851 018a 054B     		ldr	r3, .L171
 1852 018c 4FF08052 		mov	r2, #268435456
 1853 0190 1A60     		str	r2, [r3]
 1854              		.syntax unified
 1855              	@ 1401 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1856 0192 BFF34F8F 		dsb
 1857              	@ 0 "" 2
 1858              	@ 1401 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1859 0196 BFF36F8F 		isb
 1860              	@ 0 "" 2
 1861              		.thumb
 1862              		.syntax unified
 1863 019a BEE7     		b	.L146
 1864              	.L164:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 77


1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1865              		.loc 1 1423 0
 1866 019c 0020     		movs	r0, #0
 1867 019e 7DE7     		b	.L139
 1868              	.L172:
 1869              		.align	2
 1870              	.L171:
 1871 01a0 04ED00E0 		.word	-536810236
 1872              		.cfi_endproc
 1873              	.LFE13:
 1875              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1876              		.align	1
 1877              		.global	xQueueReceiveFromISR
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu fpv4-sp-d16
 1883              	xQueueReceiveFromISR:
 1884              	.LFB14:
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1885              		.loc 1 1435 0
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 0
 1888              		@ frame_needed = 0, uses_anonymous_args = 0
 1889              	.LVL200:
 1890 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1891              	.LCFI26:
 1892              		.cfi_def_cfa_offset 32
 1893              		.cfi_offset 3, -32
 1894              		.cfi_offset 4, -28
 1895              		.cfi_offset 5, -24
 1896              		.cfi_offset 6, -20
 1897              		.cfi_offset 7, -16
 1898              		.cfi_offset 8, -12
 1899              		.cfi_offset 9, -8
 1900              		.cfi_offset 14, -4
 1901              	.LVL201:
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1902              		.loc 1 1440 0
 1903 0004 60B1     		cbz	r0, .L185
 1904 0006 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1905              		.loc 1 1441 0
 1906 0008 99B9     		cbnz	r1, .L176
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1907              		.loc 1 1441 0 is_stmt 0 discriminator 2
 1908 000a 036C     		ldr	r3, [r0, #64]
 1909 000c 8BB1     		cbz	r3, .L176
 1910              	.LBB126:
 1911              	.LBB127:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1912              		.loc 2 237 0 is_stmt 1
 1913              		.syntax unified
 1914              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1915 000e 4FF05003 			mov r3, #80												
 1916 0012 83F31188 		msr basepri, r3											
 1917 0016 BFF36F8F 		isb														
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 78


 1918 001a BFF34F8F 		dsb														
 1919              	
 1920              	@ 0 "" 2
 1921              	.LVL202:
 1922              		.thumb
 1923              		.syntax unified
 1924              	.L177:
 1925 001e FEE7     		b	.L177
 1926              	.L185:
 1927              	.LBE127:
 1928              	.LBE126:
 1929              	.LBB128:
 1930              	.LBB129:
 1931              		.syntax unified
 1932              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1933 0020 4FF05003 			mov r3, #80												
 1934 0024 83F31188 		msr basepri, r3											
 1935 0028 BFF36F8F 		isb														
 1936 002c BFF34F8F 		dsb														
 1937              	
 1938              	@ 0 "" 2
 1939              	.LVL203:
 1940              		.thumb
 1941              		.syntax unified
 1942              	.L175:
 1943 0030 FEE7     		b	.L175
 1944              	.L176:
 1945 0032 1746     		mov	r7, r2
 1946 0034 8946     		mov	r9, r1
 1947              	.LBE129:
 1948              	.LBE128:
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1949              		.loc 1 1457 0
 1950 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1951              	.LVL204:
 1952              	.LBB130:
 1953              	.LBB131:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1954              		.loc 2 253 0
 1955              		.syntax unified
 1956              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1957 003a EFF31186 			mrs r6, basepri											
 1958 003e 4FF05003 		mov r3, #80												
 1959 0042 83F31188 		msr basepri, r3											
 1960 0046 BFF36F8F 		isb														
 1961 004a BFF34F8F 		dsb														
 1962              	
 1963              	@ 0 "" 2
 1964              		.thumb
 1965              		.syntax unified
 1966              	.LBE131:
 1967              	.LBE130:
 1968              	.LBB132:
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1969              		.loc 1 1461 0
 1970 004e D4F83880 		ldr	r8, [r4, #56]
 1971              	.LVL205:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 79


1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1972              		.loc 1 1464 0
 1973 0052 B8F1000F 		cmp	r8, #0
 1974 0056 1DD0     		beq	.L180
 1975              	.LBB133:
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1976              		.loc 1 1466 0
 1977 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 1978 005c 6DB2     		sxtb	r5, r5
 1979              	.LVL206:
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1980              		.loc 1 1470 0
 1981 005e 4946     		mov	r1, r9
 1982 0060 2046     		mov	r0, r4
 1983 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 1984              	.LVL207:
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1985              		.loc 1 1471 0
 1986 0066 08F1FF33 		add	r3, r8, #-1
 1987 006a A363     		str	r3, [r4, #56]
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1988              		.loc 1 1477 0
 1989 006c B5F1FF3F 		cmp	r5, #-1
 1990 0070 05D0     		beq	.L186
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1991              		.loc 1 1508 0
 1992 0072 6B1C     		adds	r3, r5, #1
 1993 0074 5BB2     		sxtb	r3, r3
 1994 0076 84F84430 		strb	r3, [r4, #68]
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1995              		.loc 1 1511 0
 1996 007a 0120     		movs	r0, #1
 1997 007c 0BE0     		b	.L178
 1998              	.L186:
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1999              		.loc 1 1479 0
 2000 007e 2369     		ldr	r3, [r4, #16]
 2001 0080 6BB1     		cbz	r3, .L181
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2002              		.loc 1 1481 0
 2003 0082 04F11000 		add	r0, r4, #16
 2004 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2005              	.LVL208:
 2006 008a 50B1     		cbz	r0, .L182
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2007              		.loc 1 1485 0
 2008 008c 5FB1     		cbz	r7, .L183
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2009              		.loc 1 1487 0
 2010 008e 0120     		movs	r0, #1
 2011 0090 3860     		str	r0, [r7]
 2012 0092 00E0     		b	.L178
 2013              	.LVL209:
 2014              	.L180:
 2015              	.LBE133:
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2016              		.loc 1 1515 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 80


 2017 0094 0020     		movs	r0, #0
 2018              	.L178:
 2019              	.LVL210:
 2020              	.LBE132:
 2021              	.LBB135:
 2022              	.LBB136:
 2023              		.loc 2 271 0
 2024              		.syntax unified
 2025              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2026 0096 86F31188 			msr basepri, r6	
 2027              	@ 0 "" 2
 2028              	.LVL211:
 2029              		.thumb
 2030              		.syntax unified
 2031              	.LBE136:
 2032              	.LBE135:
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2033              		.loc 1 1522 0
 2034 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2035              	.LVL212:
 2036              	.L181:
 2037              	.LBB137:
 2038              	.LBB134:
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2039              		.loc 1 1511 0
 2040 009e 0120     		movs	r0, #1
 2041 00a0 F9E7     		b	.L178
 2042              	.L182:
 2043 00a2 0120     		movs	r0, #1
 2044 00a4 F7E7     		b	.L178
 2045              	.L183:
 2046 00a6 0120     		movs	r0, #1
 2047 00a8 F5E7     		b	.L178
 2048              	.LBE134:
 2049              	.LBE137:
 2050              		.cfi_endproc
 2051              	.LFE14:
 2053              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2054              		.align	1
 2055              		.global	xQueuePeekFromISR
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv4-sp-d16
 2061              	xQueuePeekFromISR:
 2062              	.LFB15:
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2063              		.loc 1 1526 0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 2067              	.LVL213:
 2068 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2069              	.LCFI27:
 2070              		.cfi_def_cfa_offset 24
 2071              		.cfi_offset 3, -24
 2072              		.cfi_offset 4, -20
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 81


 2073              		.cfi_offset 5, -16
 2074              		.cfi_offset 6, -12
 2075              		.cfi_offset 7, -8
 2076              		.cfi_offset 14, -4
 2077              	.LVL214:
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2078              		.loc 1 1532 0
 2079 0002 60B1     		cbz	r0, .L197
 2080 0004 0446     		mov	r4, r0
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2081              		.loc 1 1533 0
 2082 0006 99B9     		cbnz	r1, .L190
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2083              		.loc 1 1533 0 is_stmt 0 discriminator 2
 2084 0008 036C     		ldr	r3, [r0, #64]
 2085 000a 8BB1     		cbz	r3, .L190
 2086              	.LBB138:
 2087              	.LBB139:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2088              		.loc 2 237 0 is_stmt 1
 2089              		.syntax unified
 2090              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2091 000c 4FF05003 			mov r3, #80												
 2092 0010 83F31188 		msr basepri, r3											
 2093 0014 BFF36F8F 		isb														
 2094 0018 BFF34F8F 		dsb														
 2095              	
 2096              	@ 0 "" 2
 2097              	.LVL215:
 2098              		.thumb
 2099              		.syntax unified
 2100              	.L191:
 2101 001c FEE7     		b	.L191
 2102              	.L197:
 2103              	.LBE139:
 2104              	.LBE138:
 2105              	.LBB140:
 2106              	.LBB141:
 2107              		.syntax unified
 2108              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2109 001e 4FF05003 			mov r3, #80												
 2110 0022 83F31188 		msr basepri, r3											
 2111 0026 BFF36F8F 		isb														
 2112 002a BFF34F8F 		dsb														
 2113              	
 2114              	@ 0 "" 2
 2115              	.LVL216:
 2116              		.thumb
 2117              		.syntax unified
 2118              	.L189:
 2119 002e FEE7     		b	.L189
 2120              	.L190:
 2121              	.LBE141:
 2122              	.LBE140:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2123              		.loc 1 1534 0
 2124 0030 236C     		ldr	r3, [r4, #64]
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 82


 2125 0032 43B9     		cbnz	r3, .L192
 2126              	.LBB142:
 2127              	.LBB143:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2128              		.loc 2 237 0
 2129              		.syntax unified
 2130              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2131 0034 4FF05003 			mov r3, #80												
 2132 0038 83F31188 		msr basepri, r3											
 2133 003c BFF36F8F 		isb														
 2134 0040 BFF34F8F 		dsb														
 2135              	
 2136              	@ 0 "" 2
 2137              	.LVL217:
 2138              		.thumb
 2139              		.syntax unified
 2140              	.L193:
 2141 0044 FEE7     		b	.L193
 2142              	.L192:
 2143 0046 0D46     		mov	r5, r1
 2144              	.LBE143:
 2145              	.LBE142:
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2146              		.loc 1 1550 0
 2147 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2148              	.LVL218:
 2149              	.LBB144:
 2150              	.LBB145:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2151              		.loc 2 253 0
 2152              		.syntax unified
 2153              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2154 004c EFF31186 			mrs r6, basepri											
 2155 0050 4FF05003 		mov r3, #80												
 2156 0054 83F31188 		msr basepri, r3											
 2157 0058 BFF36F8F 		isb														
 2158 005c BFF34F8F 		dsb														
 2159              	
 2160              	@ 0 "" 2
 2161              		.thumb
 2162              		.syntax unified
 2163              	.LBE145:
 2164              	.LBE144:
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2165              		.loc 1 1555 0
 2166 0060 A36B     		ldr	r3, [r4, #56]
 2167 0062 4BB1     		cbz	r3, .L195
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2168              		.loc 1 1561 0
 2169 0064 E768     		ldr	r7, [r4, #12]
 2170              	.LVL219:
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2171              		.loc 1 1562 0
 2172 0066 2946     		mov	r1, r5
 2173 0068 2046     		mov	r0, r4
 2174 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 2175              	.LVL220:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 83


1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2176              		.loc 1 1563 0
 2177 006e E760     		str	r7, [r4, #12]
 2178              	.LVL221:
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2179              		.loc 1 1565 0
 2180 0070 0120     		movs	r0, #1
 2181              	.LVL222:
 2182              	.L194:
 2183              	.LBB146:
 2184              	.LBB147:
 2185              		.loc 2 271 0
 2186              		.syntax unified
 2187              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2188 0072 86F31188 			msr basepri, r6	
 2189              	@ 0 "" 2
 2190              	.LVL223:
 2191              		.thumb
 2192              		.syntax unified
 2193              	.LBE147:
 2194              	.LBE146:
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2195              		.loc 1 1576 0
 2196 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2197              	.LVL224:
 2198              	.L195:
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2199              		.loc 1 1569 0
 2200 0078 0020     		movs	r0, #0
 2201 007a FAE7     		b	.L194
 2202              		.cfi_endproc
 2203              	.LFE15:
 2205              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2206              		.align	1
 2207              		.global	uxQueueMessagesWaiting
 2208              		.syntax unified
 2209              		.thumb
 2210              		.thumb_func
 2211              		.fpu fpv4-sp-d16
 2213              	uxQueueMessagesWaiting:
 2214              	.LFB16:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2215              		.loc 1 1580 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 0
 2218              		@ frame_needed = 0, uses_anonymous_args = 0
 2219              	.LVL225:
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2220              		.loc 1 1583 0
 2221 0000 40B9     		cbnz	r0, .L199
 2222              	.LBB148:
 2223              	.LBB149:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2224              		.loc 2 237 0
 2225              		.syntax unified
 2226              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2227 0002 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 84


 2228 0006 83F31188 		msr basepri, r3											
 2229 000a BFF36F8F 		isb														
 2230 000e BFF34F8F 		dsb														
 2231              	
 2232              	@ 0 "" 2
 2233              	.LVL226:
 2234              		.thumb
 2235              		.syntax unified
 2236              	.L200:
 2237 0012 FEE7     		b	.L200
 2238              	.L199:
 2239              	.LBE149:
 2240              	.LBE148:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2241              		.loc 1 1580 0
 2242 0014 10B5     		push	{r4, lr}
 2243              	.LCFI28:
 2244              		.cfi_def_cfa_offset 8
 2245              		.cfi_offset 4, -8
 2246              		.cfi_offset 14, -4
 2247 0016 0446     		mov	r4, r0
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2248              		.loc 1 1585 0
 2249 0018 FFF7FEFF 		bl	vPortEnterCritical
 2250              	.LVL227:
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2251              		.loc 1 1587 0
 2252 001c A46B     		ldr	r4, [r4, #56]
 2253              	.LVL228:
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2254              		.loc 1 1589 0
 2255 001e FFF7FEFF 		bl	vPortExitCritical
 2256              	.LVL229:
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2257              		.loc 1 1592 0
 2258 0022 2046     		mov	r0, r4
 2259 0024 10BD     		pop	{r4, pc}
 2260              		.cfi_endproc
 2261              	.LFE16:
 2263              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2264              		.align	1
 2265              		.global	uxQueueSpacesAvailable
 2266              		.syntax unified
 2267              		.thumb
 2268              		.thumb_func
 2269              		.fpu fpv4-sp-d16
 2271              	uxQueueSpacesAvailable:
 2272              	.LFB17:
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2273              		.loc 1 1596 0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 2277              	.LVL230:
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2278              		.loc 1 1601 0
 2279 0000 40B9     		cbnz	r0, .L204
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 85


 2280              	.LBB150:
 2281              	.LBB151:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2282              		.loc 2 237 0
 2283              		.syntax unified
 2284              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2285 0002 4FF05003 			mov r3, #80												
 2286 0006 83F31188 		msr basepri, r3											
 2287 000a BFF36F8F 		isb														
 2288 000e BFF34F8F 		dsb														
 2289              	
 2290              	@ 0 "" 2
 2291              	.LVL231:
 2292              		.thumb
 2293              		.syntax unified
 2294              	.L205:
 2295 0012 FEE7     		b	.L205
 2296              	.L204:
 2297              	.LBE151:
 2298              	.LBE150:
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2299              		.loc 1 1596 0
 2300 0014 10B5     		push	{r4, lr}
 2301              	.LCFI29:
 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 4, -8
 2304              		.cfi_offset 14, -4
 2305 0016 0446     		mov	r4, r0
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2306              		.loc 1 1603 0
 2307 0018 FFF7FEFF 		bl	vPortEnterCritical
 2308              	.LVL232:
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2309              		.loc 1 1605 0
 2310 001c E36B     		ldr	r3, [r4, #60]
 2311 001e A46B     		ldr	r4, [r4, #56]
 2312              	.LVL233:
 2313 0020 1C1B     		subs	r4, r3, r4
 2314              	.LVL234:
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2315              		.loc 1 1607 0
 2316 0022 FFF7FEFF 		bl	vPortExitCritical
 2317              	.LVL235:
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2318              		.loc 1 1610 0
 2319 0026 2046     		mov	r0, r4
 2320 0028 10BD     		pop	{r4, pc}
 2321              		.cfi_endproc
 2322              	.LFE17:
 2324              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2325              		.align	1
 2326              		.global	uxQueueMessagesWaitingFromISR
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2330              		.fpu fpv4-sp-d16
 2332              	uxQueueMessagesWaitingFromISR:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 86


 2333              	.LFB18:
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 2334              		.loc 1 1614 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              		@ link register save eliminated.
 2339              	.LVL236:
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2340              		.loc 1 1617 0
 2341 0000 08B1     		cbz	r0, .L211
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2342              		.loc 1 1619 0
 2343 0002 806B     		ldr	r0, [r0, #56]
 2344              	.LVL237:
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2345              		.loc 1 1622 0
 2346 0004 7047     		bx	lr
 2347              	.LVL238:
 2348              	.L211:
 2349              	.LBB152:
 2350              	.LBB153:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2351              		.loc 2 237 0
 2352              		.syntax unified
 2353              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2354 0006 4FF05003 			mov r3, #80												
 2355 000a 83F31188 		msr basepri, r3											
 2356 000e BFF36F8F 		isb														
 2357 0012 BFF34F8F 		dsb														
 2358              	
 2359              	@ 0 "" 2
 2360              	.LVL239:
 2361              		.thumb
 2362              		.syntax unified
 2363              	.L210:
 2364 0016 FEE7     		b	.L210
 2365              	.LBE153:
 2366              	.LBE152:
 2367              		.cfi_endproc
 2368              	.LFE18:
 2370              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2371              		.align	1
 2372              		.global	xQueueIsQueueEmptyFromISR
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
 2376              		.fpu fpv4-sp-d16
 2378              	xQueueIsQueueEmptyFromISR:
 2379              	.LFB24:
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2380              		.loc 1 1936 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
 2385              	.LVL240:
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 87


1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2386              		.loc 1 1939 0
 2387 0000 18B1     		cbz	r0, .L217
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2388              		.loc 1 1940 0
 2389 0002 836B     		ldr	r3, [r0, #56]
 2390 0004 53B9     		cbnz	r3, .L216
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2391              		.loc 1 1942 0
 2392 0006 0120     		movs	r0, #1
 2393              	.LVL241:
 2394 0008 7047     		bx	lr
 2395              	.LVL242:
 2396              	.L217:
 2397              	.LBB154:
 2398              	.LBB155:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2399              		.loc 2 237 0
 2400              		.syntax unified
 2401              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2402 000a 4FF05003 			mov r3, #80												
 2403 000e 83F31188 		msr basepri, r3											
 2404 0012 BFF36F8F 		isb														
 2405 0016 BFF34F8F 		dsb														
 2406              	
 2407              	@ 0 "" 2
 2408              	.LVL243:
 2409              		.thumb
 2410              		.syntax unified
 2411              	.L214:
 2412 001a FEE7     		b	.L214
 2413              	.L216:
 2414              	.LBE155:
 2415              	.LBE154:
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2416              		.loc 1 1946 0
 2417 001c 0020     		movs	r0, #0
 2418              	.LVL244:
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2419              		.loc 1 1950 0
 2420 001e 7047     		bx	lr
 2421              		.cfi_endproc
 2422              	.LFE24:
 2424              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2425              		.align	1
 2426              		.global	xQueueIsQueueFullFromISR
 2427              		.syntax unified
 2428              		.thumb
 2429              		.thumb_func
 2430              		.fpu fpv4-sp-d16
 2432              	xQueueIsQueueFullFromISR:
 2433              	.LFB26:
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 2434              		.loc 1 1975 0
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 88


 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 0
 2437              		@ frame_needed = 0, uses_anonymous_args = 0
 2438              		@ link register save eliminated.
 2439              	.LVL245:
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 2440              		.loc 1 1978 0
 2441 0000 28B1     		cbz	r0, .L223
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2442              		.loc 1 1979 0
 2443 0002 826B     		ldr	r2, [r0, #56]
 2444 0004 C36B     		ldr	r3, [r0, #60]
 2445 0006 9A42     		cmp	r2, r3
 2446 0008 0AD1     		bne	.L222
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 2447              		.loc 1 1981 0
 2448 000a 0120     		movs	r0, #1
 2449              	.LVL246:
 2450 000c 7047     		bx	lr
 2451              	.LVL247:
 2452              	.L223:
 2453              	.LBB156:
 2454              	.LBB157:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2455              		.loc 2 237 0
 2456              		.syntax unified
 2457              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2458 000e 4FF05003 			mov r3, #80												
 2459 0012 83F31188 		msr basepri, r3											
 2460 0016 BFF36F8F 		isb														
 2461 001a BFF34F8F 		dsb														
 2462              	
 2463              	@ 0 "" 2
 2464              	.LVL248:
 2465              		.thumb
 2466              		.syntax unified
 2467              	.L220:
 2468 001e FEE7     		b	.L220
 2469              	.L222:
 2470              	.LBE157:
 2471              	.LBE156:
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 2472              		.loc 1 1985 0
 2473 0020 0020     		movs	r0, #0
 2474              	.LVL249:
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2475              		.loc 1 1989 0
 2476 0022 7047     		bx	lr
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 89


 2477              		.cfi_endproc
 2478              	.LFE26:
 2480              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2481              		.align	1
 2482              		.global	vQueueAddToRegistry
 2483              		.syntax unified
 2484              		.thumb
 2485              		.thumb_func
 2486              		.fpu fpv4-sp-d16
 2488              	vQueueAddToRegistry:
 2489              	.LFB27:
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 90


2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 91


2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 92


2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 93


2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 94


2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2490              		.loc 1 2270 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 0, uses_anonymous_args = 0
 2494              		@ link register save eliminated.
 2495              	.LVL250:
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2496              		.loc 1 2275 0
 2497 0000 0023     		movs	r3, #0
 2498              	.LVL251:
 2499              	.L225:
 2500              		.loc 1 2275 0 is_stmt 0 discriminator 1
 2501 0002 072B     		cmp	r3, #7
 2502 0004 0CD8     		bhi	.L229
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2503              		.loc 1 2277 0 is_stmt 1
 2504 0006 074A     		ldr	r2, .L231
 2505 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2506 000c 0AB1     		cbz	r2, .L230
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2507              		.loc 1 2275 0 discriminator 2
 2508 000e 0133     		adds	r3, r3, #1
 2509              	.LVL252:
 2510 0010 F7E7     		b	.L225
 2511              	.L230:
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2512              		.loc 1 2280 0
 2513 0012 044A     		ldr	r2, .L231
 2514 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2515              		.loc 1 2281 0
 2516 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2517              	.LVL253:
 2518 001c 5860     		str	r0, [r3, #4]
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2519              		.loc 1 2284 0
 2520 001e 7047     		bx	lr
 2521              	.LVL254:
 2522              	.L229:
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 95


2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2523              		.loc 1 2291 0
 2524 0020 7047     		bx	lr
 2525              	.L232:
 2526 0022 00BF     		.align	2
 2527              	.L231:
 2528 0024 00000000 		.word	xQueueRegistry
 2529              		.cfi_endproc
 2530              	.LFE27:
 2532              		.section	.text.pcQueueGetName,"ax",%progbits
 2533              		.align	1
 2534              		.global	pcQueueGetName
 2535              		.syntax unified
 2536              		.thumb
 2537              		.thumb_func
 2538              		.fpu fpv4-sp-d16
 2540              	pcQueueGetName:
 2541              	.LFB28:
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2542              		.loc 1 2299 0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 0
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
 2547              	.LVL255:
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2548              		.loc 1 2305 0
 2549 0000 0023     		movs	r3, #0
 2550              	.LVL256:
 2551              	.L234:
 2552              		.loc 1 2305 0 is_stmt 0 discriminator 1
 2553 0002 072B     		cmp	r3, #7
 2554 0004 0BD8     		bhi	.L238
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2555              		.loc 1 2307 0 is_stmt 1
 2556 0006 074A     		ldr	r2, .L240
 2557 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2558 000c 5268     		ldr	r2, [r2, #4]
 2559 000e 8242     		cmp	r2, r0
 2560 0010 01D0     		beq	.L239
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 96


2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2561              		.loc 1 2305 0 discriminator 2
 2562 0012 0133     		adds	r3, r3, #1
 2563              	.LVL257:
 2564 0014 F5E7     		b	.L234
 2565              	.L239:
2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2566              		.loc 1 2309 0
 2567 0016 034A     		ldr	r2, .L240
 2568 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2569              	.LVL258:
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2570              		.loc 1 2310 0
 2571 001c 7047     		bx	lr
 2572              	.LVL259:
 2573              	.L238:
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2574              		.loc 1 2301 0
 2575 001e 0020     		movs	r0, #0
 2576              	.LVL260:
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2577              		.loc 1 2319 0
 2578 0020 7047     		bx	lr
 2579              	.L241:
 2580 0022 00BF     		.align	2
 2581              	.L240:
 2582 0024 00000000 		.word	xQueueRegistry
 2583              		.cfi_endproc
 2584              	.LFE28:
 2586              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2587              		.align	1
 2588              		.global	vQueueUnregisterQueue
 2589              		.syntax unified
 2590              		.thumb
 2591              		.thumb_func
 2592              		.fpu fpv4-sp-d16
 2594              	vQueueUnregisterQueue:
 2595              	.LFB29:
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 2596              		.loc 1 2327 0
 2597              		.cfi_startproc
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 97


 2598              		@ args = 0, pretend = 0, frame = 0
 2599              		@ frame_needed = 0, uses_anonymous_args = 0
 2600              		@ link register save eliminated.
 2601              	.LVL261:
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2602              		.loc 1 2332 0
 2603 0000 0023     		movs	r3, #0
 2604              	.LVL262:
 2605              	.L243:
 2606              		.loc 1 2332 0 is_stmt 0 discriminator 1
 2607 0002 072B     		cmp	r3, #7
 2608 0004 0FD8     		bhi	.L247
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2609              		.loc 1 2334 0 is_stmt 1
 2610 0006 084A     		ldr	r2, .L249
 2611 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2612 000c 5268     		ldr	r2, [r2, #4]
 2613 000e 8242     		cmp	r2, r0
 2614 0010 01D0     		beq	.L248
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2615              		.loc 1 2332 0 discriminator 2
 2616 0012 0133     		adds	r3, r3, #1
 2617              	.LVL263:
 2618 0014 F5E7     		b	.L243
 2619              	.L248:
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2620              		.loc 1 2337 0
 2621 0016 044A     		ldr	r2, .L249
 2622 0018 0021     		movs	r1, #0
 2623 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2624              		.loc 1 2342 0
 2625 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2626              	.LVL264:
 2627 0022 5960     		str	r1, [r3, #4]
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 2628              		.loc 1 2343 0
 2629 0024 7047     		bx	lr
 2630              	.LVL265:
 2631              	.L247:
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 98


2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2632              		.loc 1 2351 0
 2633 0026 7047     		bx	lr
 2634              	.L250:
 2635              		.align	2
 2636              	.L249:
 2637 0028 00000000 		.word	xQueueRegistry
 2638              		.cfi_endproc
 2639              	.LFE29:
 2641              		.section	.text.vQueueDelete,"ax",%progbits
 2642              		.align	1
 2643              		.global	vQueueDelete
 2644              		.syntax unified
 2645              		.thumb
 2646              		.thumb_func
 2647              		.fpu fpv4-sp-d16
 2649              	vQueueDelete:
 2650              	.LFB19:
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2651              		.loc 1 1626 0
 2652              		.cfi_startproc
 2653              		@ args = 0, pretend = 0, frame = 0
 2654              		@ frame_needed = 0, uses_anonymous_args = 0
 2655              	.LVL266:
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2656              		.loc 1 1629 0
 2657 0000 40B9     		cbnz	r0, .L252
 2658              	.LBB158:
 2659              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2660              		.loc 2 237 0
 2661              		.syntax unified
 2662              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2663 0002 4FF05003 			mov r3, #80												
 2664 0006 83F31188 		msr basepri, r3											
 2665 000a BFF36F8F 		isb														
 2666 000e BFF34F8F 		dsb														
 2667              	
 2668              	@ 0 "" 2
 2669              	.LVL267:
 2670              		.thumb
 2671              		.syntax unified
 2672              	.L253:
 2673 0012 FEE7     		b	.L253
 2674              	.L252:
 2675              	.LBE159:
 2676              	.LBE158:
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2677              		.loc 1 1626 0
 2678 0014 10B5     		push	{r4, lr}
 2679              	.LCFI30:
 2680              		.cfi_def_cfa_offset 8
 2681              		.cfi_offset 4, -8
 2682              		.cfi_offset 14, -4
 2683 0016 0446     		mov	r4, r0
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 99


 2684              		.loc 1 1634 0
 2685 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 2686              	.LVL268:
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2687              		.loc 1 1642 0
 2688 001c 2046     		mov	r0, r4
 2689 001e FFF7FEFF 		bl	vPortFree
 2690              	.LVL269:
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2691              		.loc 1 1664 0
 2692 0022 10BD     		pop	{r4, pc}
 2693              		.cfi_endproc
 2694              	.LFE19:
 2696              		.comm	xQueueRegistry,64,4
 2697              		.text
 2698              	.Letext0:
 2699              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 2700              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2701              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2702              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2703              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2704              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2705              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 2706              		.file 10 "Inc/FreeRTOSConfig.h"
 2707              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 2708              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 2709              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 2710              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 2711              		.file 15 "<built-in>"
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 100


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:18     .text.prvIsQueueFull:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:24     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:66     .text.prvIsQueueEmpty:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:72     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:111    .text.prvCopyDataToQueue:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:117    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:236    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:242    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:291    .text.prvUnlockQueue:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:297    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:403    .text.xQueueGenericReset:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:410    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:519    .text.xQueueGenericReset:00000080 $d
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:524    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:530    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:572    .text.xQueueGenericCreate:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:579    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:666    .text.xQueueGenericSend:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:673    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:997    .text.xQueueGenericSend:00000178 $d
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1002   .text.prvInitialiseMutex:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1008   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1048   .text.xQueueCreateMutex:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1055   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1087   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1094   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1292   .text.xQueueGiveFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1299   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1507   .text.xQueueGenericReceive:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1514   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1871   .text.xQueueGenericReceive:000001a0 $d
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1876   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:1883   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2054   .text.xQueuePeekFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2061   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2206   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2213   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2264   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2271   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2325   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2332   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2371   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2378   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2425   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2432   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2481   .text.vQueueAddToRegistry:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2488   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2528   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2533   .text.pcQueueGetName:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2540   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2582   .text.pcQueueGetName:00000024 $d
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2587   .text.vQueueUnregisterQueue:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2594   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2637   .text.vQueueUnregisterQueue:00000028 $d
ARM GAS  C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s 			page 101


C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2642   .text.vQueueDelete:00000000 $t
C:\Users\acw\AppData\Local\Temp\ccrdXhmH.s:2649   .text.vQueueDelete:00000000 vQueueDelete

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
